#!/usr/bin/env -S fontforge -quiet
# -*- mode: python; coding: utf-8 -*-

import os
import fontforge
import re
import argparse
import psMat
import statistics

STROKE_WIDTH_BASIS = 96

def main():
    global args
    parser = argparse.ArgumentParser(description="import SVG characters")
    parser.add_argument('font_filename', help="font filename")
    parser.add_argument('svg_filenames', nargs='+', help="svg characters")
    parser.add_argument('--expand-stroke', '-x', type=int, help="number of pixels to expand stroke")
    parser.add_argument('--dry-run', '-n', action='store_true')
    parser.add_argument('-o', '--save-as', '--output', type=str, help="after editing, save as new file, converts if file extension is different")
    parser.add_argument('--translate-x', type=int)
    parser.add_argument('--translate-y', type=int)
    parser.add_argument('--scale-y', type=float)
    parser.add_argument('--scale-y-from', type=float)
    parser.add_argument('--scale-x', type=float)
    parser.add_argument('--scale-x-from', type=float)
    parser.add_argument('--aspect', '--aspect-ratio', type=float)
    args = parser.parse_args()

    print("Loading %s" % args.font_filename)
    font = fontforge.open(args.font_filename)
    write_font_filename = args.save_as if args.save_as is not None else args.font_filename

    stroked_glyphs = []
    smol_glyphs = []
    composite_glyphs = []

    for glyph in font.glyphs():
        glyph.temporary = {}
        glyph.temporary["is_composite"] = False
        glyph.temporary["is_resized"] = False

    for glyph in font.glyphs():
        if len(glyph.references) and not len(glyph.foreground):
            glyph.temporary["is_composite"] = True
            composite_glyphs.append(glyph)
            continue

    for svg_filename in args.svg_filenames:
        (codepoint, glyphname, suffix) = parse_glyph_svg_filename(svg_filename)
        plain_glyphname = glyphname.split('.')[0]
        real_codepoint = fontforge.unicodeFromName(plain_glyphname)
        if codepoint is None and glyphname is None:
            print("%s: not an SVG character filename; skipping" % svg_filename)
            continue
        if glyphname in font:
            glyph = font[glyphname]
            if glyph.temporary["is_composite"]:
                continue
        glyph = font.createChar(codepoint, glyphname)
        stroked_glyphs.append(glyph)
        glyph.temporary = {}
        glyph.temporary["svg_filename"] = svg_filename
        if codepoint in range(33,127) or suffix == 'orig':
            # Create autogenerated .smol glyphs for **original** ASCII printables.
            # FIXME: creates non-ASCII characters from xxx--orig.svg files.
            sm_glyphname = plain_glyphname + '.smol'
            sm_glyph = font.createChar(-1, sm_glyphname)
            smol_glyphs.append(sm_glyph)
            sm_glyph.temporary = {}
            sm_glyph.temporary["svg_filename"] = svg_filename

    generated_glyphs = []
    for glyph in font.glyphs():
        if glyph.unicode in range(0x2800, 0x2900) or glyph.unicode in range(0x2500, 0x25a0):
            generated_glyphs.append(glyph)

    # import SVG outlines - strokedfont setting stops fontforge from
    # automatically expanding strokes; we do that later.
    font.strokedfont = True
    for glyph in stroked_glyphs:
        glyph.foreground = fontforge.layer()
        glyph.importOutlines(glyph.temporary["svg_filename"])
    for glyph in smol_glyphs:
        glyph.foreground = fontforge.layer()
        glyph.importOutlines(glyph.temporary["svg_filename"])
    font.strokedfont = False

    # apply smol glyph transforms
    for glyph in smol_glyphs:
        orig_width = glyph.width
        glyph.transform(psMat.scale(0.5))
        glyph.transform(psMat.translate(orig_width / 4, args.expand_stroke / 4))
        glyph.width = orig_width

    # unlink references
    for glyph in composite_glyphs:
        # Ordinarily a glyph.unlinkRef() call would replace
        # the refs with the contours from when the font was
        # loaded, ignoring any changes such as the .stroke()
        # calls.
        reconstitute_references(glyph)
        glyph.unlinkRef()

    # apply aspect
    if args.aspect:
        for glyph in [*smol_glyphs, *stroked_glyphs, *composite_glyphs]:
            orig_width = glyph.width
            final_width = round(glyph.width * args.aspect)
            xform = psMat.identity()
            xform = psMat.compose(xform, psMat.translate(-orig_width / 2, 0))
            orig_width_2 = orig_width - STROKE_WIDTH_BASIS
            final_width_2 = final_width - STROKE_WIDTH_BASIS
            xform = psMat.compose(xform, psMat.scale(final_width_2 / orig_width_2, 1))
            xform = psMat.compose(xform, psMat.translate(final_width / 2, 0))
            glyph.transform(xform)
            glyph.width = final_width
            print("[ASPECT] %s: %d => %d" % (glyph.glyphname, orig_width, final_width))
            glyph.temporary["is_resized"] = True
        for glyph in font.glyphs():
            if not glyph.temporary["is_resized"]:
                glyph.transform(psMat.scale(args.aspect, 1))
                glyph.temporary["is_resized"] = True

    # expand strokes
    for glyph in [*stroked_glyphs, *smol_glyphs, *composite_glyphs]:
        orig_width = glyph.width
        if args.expand_stroke is not None:
            glyph.stroke("circular", args.expand_stroke, "round", "round")
        glyph.removeOverlap()
        glyph.width = orig_width

    if args.dry_run:
        print("DRY RUN: not saving or generating %s" % write_font_filename)
        return
    if os.path.splitext(write_font_filename)[1] == '.sfd':
        print("Saving %s" % write_font_filename)
        font.save(write_font_filename)
    else:
        print("Generating %s" % write_font_filename)
        font.generate(write_font_filename)

def font_glyph_width(font):
    return statistics.median([glyph.width for glyph in font.glyphs()])

def parse_glyph_svg_filename(svg_filename):
    (svg_dirname, svg_basename) = os.path.split(svg_filename)
    match_1 = re.search(r'^(?:u\+|0x)?([0-9a-f]+)', svg_basename, flags=re.IGNORECASE)
    match_2 = re.search(r'^x--', svg_basename, flags=re.IGNORECASE)
    match_3 = re.search(r'--(.+)$', os.path.splitext(svg_basename)[0]) # foo--bar.svg => "bar"
    if not match_1 and not match_2:
        return [None, None]
    suffix = match_3.expand('\\1') if match_3 else None
    hex = match_1.expand('\\1') if match_1 else None
    codepoint = int(hex, 16) if hex is not None else -1
    if codepoint < 0:
        glyphname = suffix
    elif suffix is not None:
        glyphname = fontforge.nameFromUnicode(codepoint) + "." + suffix
        codepoint = -1
    else:
        glyphname = fontforge.nameFromUnicode(codepoint)
    return [codepoint, glyphname, suffix]

def reconstitute_references(glyph):
    # Apparently a glyph.unlinkRef() call will replace the
    # references with the contours from when the font was
    # loaded, ignoring any changes we make to the glyph.
    references = glyph.references
    glyph.references = []
    for reference in references:
        glyph.addReference(reference[0], reference[1])

main()
