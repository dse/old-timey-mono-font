#!/usr/bin/env -S fontforge -quiet
# -*- mode: python; coding: utf-8 -*-

import os
import fontforge
import re
import argparse
import psMat
import statistics

def main():
    global args
    parser = argparse.ArgumentParser(description="import SVG characters")
    parser.add_argument('font_filename', help="font filename")
    parser.add_argument('svg_filenames', nargs='+', help="svg characters")
    parser.add_argument('--expand-stroke', '-x', type=int, help="number of pixels to expand stroke")
    parser.add_argument('--expand-sm-stroke', '-X', type=int, help="number of pixels to expand stroke in .smol glyphs")
    parser.add_argument('--dry-run', '-n', action='store_true')
    parser.add_argument('-o', '--save-as', '--output', type=str, help="after editing, save as new file, converts if file extension is different")
    parser.add_argument('--translate-x', type=int)
    parser.add_argument('--translate-y', type=int)
    parser.add_argument('--scale-y', type=float)
    parser.add_argument('--scale-y-from', type=float)
    parser.add_argument('--scale-x', type=float)
    parser.add_argument('--scale-x-from', type=float)
    args = parser.parse_args()

    print("Loading %s" % args.font_filename)
    font = fontforge.open(args.font_filename)
    write_font_filename = args.save_as if args.save_as is not None else args.font_filename

    expand_sm_stroke = args.expand_sm_stroke if args.expand_sm_stroke is not None else args.expand_stroke

    for svg_filename in args.svg_filenames:
        (codepoint, glyphname, suffix) = parse_glyph_svg_filename(svg_filename)
        # 0030-zero--small.svg will have codepoint -1 and suffix small
        # 0030--small.svg would have codepoint -1 and suffix small
        # 0030-zero--orig.svg will have codepoint -1 and suffix orig
        # 0030--orig.svg would have codepoint -1 and suffix orig
        # 0030.svg would have codept 0x30
        # 0030-zero.svg would have codept 0x30
        plain_glyphname = glyphname.split('.')[0]
        # zero.small => zero
        real_codepoint = fontforge.unicodeFromName(plain_glyphname)
        # zero.small => 0x30
        # zero       => 0x30
        if codepoint is None and glyphname is None:
            print("%s: not an SVG character filename; skipping" % svg_filename)
            continue
        glyph = font.createChar(codepoint, glyphname)
        do_import_work(font, glyph, svg_filename)
        do_outline_work(font, glyph, args.expand_stroke)
        # in original font:
        #     glyph "zero" has a reference to "zero.orig"
        #            one
        #            comma
        #            period
        #            colon
        #            semicolon
        # those are not affected in this loop
        #
        # these are affected in this loop:
        #     zero.orig           0030-zero--orig.svg
        #     one.orig            0031-one--orig.svg
        #     comma.orig          002c-comma--orig.svg
        #     period.orig         002e-period--orig.svg
        #     colon.orig          003a-colon--orig.svg
        #     semicolon.orig      003a-semicolon--orig.svg
        if codepoint in range(33,127) or suffix == 'orig':
            # create autogenerated .smol glyphs for **original** ASCII printables
            sm_glyphname = plain_glyphname + '.smol'
            # zero.smol
            # three.smol
            sm_glyph = font.createChar(-1, sm_glyphname)
            sm_glyph.foreground = fontforge.layer()
            do_import_work(font, sm_glyph, svg_filename)
            sm_glyph.transform(psMat.scale(0.5))
            sm_glyph.transform(psMat.translate(glyph.width / 4, expand_sm_stroke / 4))
            sm_glyph.width = glyph.width
            do_outline_work(font, sm_glyph, expand_sm_stroke)

    has_xform = (args.translate_x or args.translate_y or args.scale_x or args.scale_y)

    if has_xform:
        for glyph in font.glyphs():
            if glyph.unicode in range(0x2800, 0x2900) or glyph.unicode in range(0x2500, 0x25a0):
                continue
            xform = psMat.identity()
            if args.scale_y:
                scale_y = args.scale_y / args.scale_y_from if args.scale_y_from else args.scale_y
                xform = psMat.compose(xform, psMat.scale(1.0, scale_y))
            if args.scale_x:
                scale_x = args.scale_x / args.scale_x_from if args.scale_x_from else args.scale_x
                xform = psMat.compose(xform, psMat.scale(scale_x, 1.0))
            if args.translate_y or args.translate_x:
                xlate_x = args.translate_x if args.translate_x else 0
                xlate_y = args.translate_y if args.translate_y else 0
                xform = psMat.compose(xform, psMat.translate(xlate_x, xlate_y))
            if len(glyph.references) and not len(glyph.foreground):
                glyph.unlinkRef()
            # reference unlinking required because transforms
            # screw this up
            if len(glyph.foreground) and not len(glyph.references):
                orig_width = glyph.width
                glyph.transform(xform)
                glyph.left_side_bearing = int(glyph.left_side_bearing + round((orig_width - glyph.width) / 2))
                glyph.width = orig_width
                glyph.removeOverlap()

    if args.dry_run:
        print("DRY RUN: not saving or generating %s" % write_font_filename)
        return
    if os.path.splitext(write_font_filename)[1] == '.sfd':
        print("Saving %s" % write_font_filename)
        font.save(write_font_filename)
    else:
        print("Generating %s" % write_font_filename)
        font.generate(write_font_filename)

def font_glyph_width(font):
    return statistics.median([glyph.width for glyph in font.glyphs()])

def do_import_work(font, glyph, svg_filename):
    global args
    glyph.foreground = fontforge.layer()

    # Import just the paths without expanding strokes.
    font.strokedfont = True
    glyph.importOutlines(svg_filename)
    font.strokedfont = False

def do_outline_work(font, glyph, expand_stroke=None):
    global args
    codepoint = glyph.codepoint
    orig_width = glyph.width
    if expand_stroke is not None:
        glyph.stroke("circular", expand_stroke, "round", "round")
    glyph.removeOverlap()
    glyph.width = orig_width

def parse_glyph_svg_filename(svg_filename):
    (svg_dirname, svg_basename) = os.path.split(svg_filename)
    match_1 = re.search(r'^(?:u\+|0x)?([0-9a-f]+)', svg_basename, flags=re.IGNORECASE)
    match_2 = re.search(r'^x--', svg_basename, flags=re.IGNORECASE)
    match_3 = re.search(r'--(.+)$', os.path.splitext(svg_basename)[0]) # foo--bar.svg => "bar"
    if not match_1 and not match_2:
        return [None, None]
    suffix = match_3.expand('\\1') if match_3 else None
    hex = match_1.expand('\\1') if match_1 else None
    codepoint = int(hex, 16) if hex is not None else -1
    if codepoint < 0:
        glyphname = suffix
    elif suffix is not None:
        glyphname = fontforge.nameFromUnicode(codepoint) + "." + suffix
        codepoint = -1
    else:
        glyphname = fontforge.nameFromUnicode(codepoint)
    return [codepoint, glyphname, suffix]

main()
