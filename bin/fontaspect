#!/usr/bin/env -S fontforge -quiet
# -*- mode: python; coding: utf-8 -*-

import fontforge
import argparse
import os
import sys
import math
import psMat

sys.path.append(os.getenv("HOME") + "/git/dse.d/fontforge-utilities/lib")
import mixedjsontext

STROKE_WIDTH_BASIS = 96

def main():
    global args
    parser = argparse.ArgumentParser()
    parser.add_argument('font_filename', help="font filename")
    parser.add_argument('-o', '--save-as', '--output', type=str,
                        help="after editing, save as new file, converts if file extension is different")
    parser.add_argument('--aspect', '--aspect-ratio', type=float)
    args = parser.parse_args()

    print("Loading %s" % args.font_filename)
    font = fontforge.open(args.font_filename)
    write_font_filename = args.save_as if args.save_as is not None else args.font_filename

    for glyph in font.glyphs():
        if mixedjsontext.fontcomment_says_generated(glyph.comment):
            final_width = math.floor(glyph.width * args.aspect)
            glyph.transform(psMat.scale(args.aspect, 1))
            glyph.width = final_width
            continue
        if len(glyph.references):
            continue
        if not args.aspect:
            continue
        if args.aspect > 1:
            final_width = math.floor(glyph.width * args.aspect)
            glyph.transform(psMat.scale(args.aspect, 1))
            glyph.width = final_width
            continue
        orig_width = glyph.width
        # we need to store and set the final width because transform
        # may produce an incorrect glyph width.
        final_width = math.floor(glyph.width * args.aspect)
        xform = psMat.identity()
        xform = psMat.compose(xform, psMat.translate(-orig_width / 2, 0))
        orig_width_2 = orig_width - STROKE_WIDTH_BASIS
        final_width_2 = final_width - STROKE_WIDTH_BASIS
        xform = psMat.compose(xform, psMat.scale(final_width_2 / orig_width_2, 1))
        xform = psMat.compose(xform, psMat.translate(final_width / 2, 0))
        glyph.transform(xform)
        glyph.width = final_width

    if os.path.splitext(write_font_filename)[1] == '.sfd':
        print("Saving %s" % write_font_filename)
        font.save(write_font_filename)
    else:
        print("Generating %s" % write_font_filename)
        font.generate(write_font_filename)

main()
