#!/usr/bin/env -S fontforge -quiet
# -*- mode: python; coding: utf-8 -*-

import fontforge
import argparse
import os
import sys

sys.path.append(os.getenv("HOME") + "/git/dse.d/fontforge-utilities/lib")
import mixedjsontext

def main():
    global args
    parser = argparse.ArgumentParser()
    parser.add_argument('font_filename', help="font filename")
    parser.add_argument('-o', '--save-as', '--output', type=str,
                        help="after editing, save as new file, converts if file extension is different")
    parser.add_argument('--verbose', '-v', action='count', default=0)
    args = parser.parse_args()

    if args.verbose:
        print("fontunref: Loading %s" % args.font_filename)
    font = fontforge.open(args.font_filename)
    write_font_filename = args.save_as if args.save_as is not None else args.font_filename

    for glyph in font.glyphs():
        if mixedjsontext.fontcomment_says_generated(glyph.comment):
            continue
        if not len(glyph.references):
            continue
        orig_width = glyph.width
        if args.verbose:
            print("fontunref %s: Unlinking references in %s" % (args.font_filename, glyph.glyphname))
        reconstitute_references(glyph)
        glyph.unlinkRef()
        # glyph.removeOverlap()
        glyph.width = orig_width

    if os.path.splitext(write_font_filename)[1] == '.sfd':
        if args.verbose:
            print("fontunref: Saving %s" % write_font_filename)
        font.save(write_font_filename)
    else:
        if args.verbose:
            print("fontunref: Generating %s" % write_font_filename)
        font.generate(write_font_filename)

def reconstitute_references(glyph):
    # Apparently a glyph.unlinkRef() call will replace the
    # references with the contours from when the font was
    # loaded, ignoring any changes we make to the glyph.
    references = glyph.references
    glyph.references = []
    for reference in references:
        glyph.addReference(reference[0], reference[1])

main()
