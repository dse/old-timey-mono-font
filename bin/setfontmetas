#!/usr/bin/env -S fontforge -quiet
# -*- mode: python; coding: utf-8 -*-
import os
import fontforge
import re
import argparse

def main():
    global args
    # NOTE: max_help_position is undocumented; tip o' the hat:
    # https://stackoverflow.com/a/52606755/8621049
    formatter = lambda prog: argparse.HelpFormatter(prog,max_help_position=40)
    parser = argparse.ArgumentParser(
        description="edit font names and other metainformation",
        epilog="† accepts \"+appendthis\", \"prependthis+\", and \"s/this/that/\" type parameters",
        formatter_class=formatter
    )
    parser.add_argument('filename',        help='font filename')
    parser.add_argument('--ps-name',       type=str, help='e.g., "ComicSans", "ComicSans-Italic" †')
    parser.add_argument('--family-name',   type=str, help='e.g., "Comic Sans" †')
    parser.add_argument('--ps-weight',     type=str, help='e.g., "Bold" (italic not specified here) †')
    parser.add_argument('--full-name',     type=str, help='e.g., "Comic Sans Italic" †')
    parser.add_argument('--italic-angle',  type=int, help='neg = normal italic, pos = reverse italic')
    parser.add_argument('--os2-weight',    type=int, help='100 to 900')
    parser.add_argument('--panose',        type=str, help='10 values, each either "-" or non-neg integer')
    parser.add_argument('--dry-run',       action='store_true')
    parser.add_argument('--verbose', '-v', action='count', default=0)
    parser.add_argument('--sfnt-names-family',         type=str)
    parser.add_argument('--sfnt-names-subfamily',      type=str)
    parser.add_argument('--sfnt-names-fullname',       type=str)
    parser.add_argument('--sfnt-names-postscriptname', type=str)
    # font.appendSFNTName(language, strid, string)
    args = parser.parse_args()

    if args.verbose:
        print("setfontmetas: Loading %s" % args.filename)
    font = fontforge.open(args.filename)
    changed = False

    orig_fontname   = font.fontname
    orig_familyname = font.familyname
    orig_weight     = font.weight
    orig_fullname   = font.fullname

    if args.ps_name is not None:
        changed = True
        font.fontname = change(font.fontname, args.ps_name, psname=True)
    if args.family_name is not None:
        changed = True
        font.familyname = change(font.familyname, args.family_name)
    if args.ps_weight is not None:
        changed = True
        font.weight = change(font.weight, args.ps_weight)
    if args.full_name is not None:
        changed = True
        font.fullname = change(font.fullname, args.full_name)
    if args.italic_angle is not None:
        changed = True
        font.italicangle = args.italic_angle
    if args.os2_weight is not None:
        changed = True
        font.os2_weight = args.os2_weight
    if args.panose is not None:
        orig_panose = font.os2_panose
        panose_changed = False
        font_panose = list(font.os2_panose)
        panose_strings = re.split(r'[, ]+', args.panose)
        if len(panose_strings) > 10:
            raise Exception("panose contains too many values: %s" % args.panose)
        if len([value for value in panose_strings if not re.search(r'^(-|_|\d+)$', value)]) > 0:
            raise Exception("all panose values must be '-' or '_' or non-neg integer: %s" % args.panose)
        panose_values = [None if (value == '-' or value == '_') else int(value) for value in panose_strings]
        for i in range(0, 10):
            if i >= len(panose_values):
                break
            if panose_values[i] == None:
                continue
            changed = True
            panose_changed = True
            font_panose[i] = panose_values[i]
        if panose_changed:
            font.os2_panose = tuple(font_panose)
        if args.dry_run or args.verbose:
            if panose_changed:
                print("setfontmetas %s: panose: %s => %s" % (args.filename, repr(orig_panose), repr(font.os2_panose)))
            else:
                print("setfontmetas %s: panose: not changed" % args.filename)
    if args.sfnt_names_family is not None:
        font.appendSFNTName('English (US)', 'Family',
                            change(
                                coalesce(
                                    get_sfnt_name(font, 'Family'),
                                    orig_familyname
                                ),
                                args.sfnt_names_family
                            ))
    if args.sfnt_names_subfamily is not None:
        font.appendSFNTName('English (US)', 'SubFamily',
                            change(
                                coalesce(
                                    get_sfnt_name(font, 'SubFamily')
                                ),
                                args.sfnt_names_subfamily
                            ))
    if args.sfnt_names_fullname is not None:
        font.appendSFNTName('English (US)', 'Fullname',
                            change(
                                coalesce(
                                    get_sfnt_name(font, 'Fullname'),
                                    orig_fullname,
                                ),
                                args.sfnt_names_fullname
                            ))
    if args.sfnt_names_postscriptname is not None:
        font.appendSFNTName('English (US)', 'PostScriptName',
                            change(
                                coalesce(
                                    get_sfnt_name(font, 'PostScriptName'),
                                    orig_fontname,
                                ),
                                args.sfnt_names_postscriptname,
                                psname=True
                            ))

    if not changed:
        raise Exception("Font not changed" % args.filename)
    if args.dry_run:
        print("setfontmetas %s: DRY RUN: not changing" % args.filename)
        return
    if (os.path.splitext(args.filename))[1] == '.sfd':
        if args.verbose:
            print("setfontmetas: Saving %s" % args.filename)
        font.save(args.filename)
    else:
        if args.verbose:
            print("setfontmetas: Generating %s" % args.filename)
        font.generate(args.filename)

def get_sfnt_name(font, strid):
    tuples = [tuple[2] for tuple in font.sfnt_names if tuple[1] == strid]
    if len(tuples):
        return tuples[0]
    return None

def trim_norm_space(str):
    result = str
    result = re.sub(r'^\s+', '', result)
    result = re.sub(r'\s+$', '', result)
    result = re.sub(r'\s+', ' ', result)
    return result

def rm_space(str):
    return re.sub(r'\s+', '', str)

def change(orig, spec, psname=False):
    global args
    substituter_fmt = r's%s(?P<pat>.*?)%s(?P<repl>.*)%s'
    if re.fullmatch(r'\+.*\+', spec):
        result = spec
    elif spec[0] == '=':          # e.g., =blah
        result = spec[1:]
    elif spec[0] == '+':          # e.g., +blah
        result = orig + spec[1:]
    elif spec[-1] == '+':         # e.g., blah+
        result = spec[:-1] + orig
    elif match := (re.fullmatch(substituter_fmt % (r'<',  r'><',   r'>' ), spec) or
                   re.fullmatch(substituter_fmt % (r'\(', r'\)\(', r'\)'), spec) or
                   re.fullmatch(substituter_fmt % (r'\[', r'\]\[', r'\]'), spec) or
                   re.fullmatch(substituter_fmt % (r'\{', r'\}\{', r'\}'), spec) or
                   re.fullmatch(substituter_fmt % (r'(?P<separ>[^A-Za-z0-9<>()\[\]{}])',
                                                   r'(?P=separ)',
                                                   r'(?P=separ)'), spec)):
        pat = match["pat"]
        repl = match["repl"]
        result = re.sub(pat, repl, orig)
    else:
        result = spec
    if args.dry_run or args.verbose:
        print("%s: %s => %s" % (what, orig, result))
    return result

def coalesce(*values):
    for value in values:
        if value is not None:
            return value
    return None

def get_sfnt_name(font, id):
    values = [tuple[2] for tuple in font.sfnt_names if tuple[1] == id and tuple[0] == "English (US)"]
    if len(values):
        return values[0]
    return None

main()
