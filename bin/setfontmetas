#!/usr/bin/env -S fontforge -quiet
# -*- mode: python; coding: utf-8 -*-
import os
import fontforge
import re
import argparse

def main():
    global args
    parser = argparse.ArgumentParser(description="edit font names")
    parser.add_argument('filename', help='font filename')
    parser.add_argument('--ps-name', type=str, help='e.g., ComicSansItalic')
    parser.add_argument('--family-name', type=str, help='e.g., "Comic Sans"')
    parser.add_argument('--ps-weight', type=str, help='e.g., "Bold" (italic not specified here)')
    parser.add_argument('--full-name', type=str, help='e.g., "Comic Sans Italic"')
    parser.add_argument('--append-ps-name', type=str, help='e.g., "Bold", "CodeBold"')
    parser.add_argument('--append-full-name', type=str, help='e.g., "Bold", "Code Bold"')
    parser.add_argument('--append-family-name', type=str, help='e.g., "Code"')
    parser.add_argument('--italic-angle', type=int, help='e.g., -12 = //, 12 = \\\\')
    args = parser.parse_args()

    font = fontforge.open(args.filename)
    changed = False

    if args.ps_name is not None:
        changed = True
        font.fontname = args.ps_name
        print("####################### updated font.fontname: %s" % font.fontname)
    if args.family_name is not None:
        changed = True
        font.familyname = args.family_name
        print("####################### updated font.familyname: %s" % font.familyname)
    if args.ps_weight is not None:
        changed = True
        font.weight = args.ps_weight
        print("####################### updated font.weight: %s" % font.weight)
    if args.full_name is not None:
        changed = True
        font.fullname = args.full_name
        print("####################### updated font.fullname: %s" % font.fullname)

    if args.append_ps_name is not None:
        changed = True
        font.fontname += rm_space(args.append_ps_name)
        print("####################### updated font.fontname by appending: %s" % font.fontname)
    if args.append_full_name is not None:
        changed = True
        font.fullname += ' ' + trim_norm_space(args.append_full_name)
        print("####################### updated font.fullname by appending: %s" % font.fullname)
    if args.append_family_name is not None:
        changed = True
        font.familyname += ' ' + trim_norm_space(args.append_family_name)
        print("####################### updated font.familyname by appending: %s" % font.familyname)

    if args.italic_angle is not None:
        changed = True
        font.italicangle = args.italic_angle
        print("####################### updated font.italicangle: %d" % font.italicangle)
    if not changed:
        raise Exception("Font not changed")
    if (os.path.splitext(args.filename))[1] == '.sfd':
        font.save(args.filename)
    else:
        font.generate(args.filename)

def trim_norm_space(str):
    result = str
    result = re.sub(r'^\s+', '', result)
    result = re.sub(r'\s+$', '', result)
    result = re.sub(r'\s+', ' ', result)
    return result
def rm_space(str):
    return re.sub(r'\s+', '', str)

main()
