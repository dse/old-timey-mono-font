#!/usr/bin/env -S fontforge -quiet
# -*- mode: python; coding: utf-8 -*-
import os
import fontforge
import re
import argparse

def main():
    global args
    parser = argparse.ArgumentParser(description="edit font names")
    parser.add_argument('filename', help='font filename')
    parser.add_argument('--ps-name', type=str, help='e.g., ComicSansItalic')
    parser.add_argument('--family-name', type=str, help='e.g., "Comic Sans"')
    parser.add_argument('--ps-weight', type=str, help='e.g., "Bold" (italic not specified here)')
    parser.add_argument('--full-name', type=str, help='e.g., "Comic Sans Italic"')
    parser.add_argument('--append-ps-name', type=str, help='e.g., "Bold", "CodeBold"')
    parser.add_argument('--append-full-name', type=str, help='e.g., "Bold", "Code Bold"')
    parser.add_argument('--append-family-name', type=str, help='e.g., "Code"')
    parser.add_argument('--italic-angle', type=int, help='e.g., -12 = //, 12 = \\\\')
    parser.add_argument('--os2-weight', type=int)
    parser.add_argument('--panose', type=str)
    args = parser.parse_args()

    font = fontforge.open(args.filename)
    changed = False

    if args.ps_name is not None:
        changed = True
        font.fontname = args.ps_name
    if args.family_name is not None:
        changed = True
        font.familyname = args.family_name
    if args.ps_weight is not None:
        changed = True
        font.weight = args.ps_weight
    if args.full_name is not None:
        changed = True
        font.fullname = args.full_name

    if args.append_ps_name is not None:
        changed = True
        font.fontname += rm_space(args.append_ps_name)
    if args.append_full_name is not None:
        changed = True
        font.fullname += ' ' + trim_norm_space(args.append_full_name)
    if args.append_family_name is not None:
        changed = True
        font.familyname += ' ' + trim_norm_space(args.append_family_name)

    if args.italic_angle is not None:
        changed = True
        font.italicangle = args.italic_angle
    if args.os2_weight is not None:
        changed = True
        font.os2_weight = args.os2_weight

    if args.panose is not None:
        panose_changed = False
        font_panose = list(font.os2_panose)
        panose_strings = re.split(r'[, ]+', args.panose)
        if len(panose_strings) > 10:
            raise Exception("panose contains too many values: %s" % args.panose)
        if len([value for value in panose_strings if not re.search(r'^(-|\d+)$', value)]) > 0:
            raise Exception("all panose values must be '-' or non-neg integer: %s" % args.panose)
        panose_values = [None if value == '-' else int(value) for value in panose_strings]
        for i in range(0, 10):
            if i >= len(panose_values):
                break
            if panose_values[i] == None:
                continue
            changed = True
            panose_changed = True
            font_panose[i] = panose_values[i]
        if panose_changed:
            font.os2_panose = tuple(font_panose)

    if not changed:
        raise Exception("Font not changed")
    if (os.path.splitext(args.filename))[1] == '.sfd':
        font.save(args.filename)
    else:
        font.generate(args.filename)

def trim_norm_space(str):
    result = str
    result = re.sub(r'^\s+', '', result)
    result = re.sub(r'\s+$', '', result)
    result = re.sub(r'\s+', ' ', result)
    return result
def rm_space(str):
    return re.sub(r'\s+', '', str)

main()
