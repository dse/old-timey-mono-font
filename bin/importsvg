#!/usr/bin/env -S fontforge -quiet
# -*- mode: python; coding: utf-8 -*-

import fontforge
import argparse
import os
import sys

sys.path.append(os.path.dirname(__file__) + "/../lib")
from parseglyphsvgfilename import parse_glyph_svg_filename

sys.path.append(os.getenv("HOME") + "/git/dse.d/fontforge-utilities/lib")
import mixedjsontext

STROKE_WIDTH_BASIS = 96

def main():
    global args
    parser = argparse.ArgumentParser()
    parser.add_argument('font_filename', help="font filename")
    parser.add_argument('svg_filenames', nargs='+', help="svg characters")
    parser.add_argument('-o', '--save-as', '--output', type=str,
                        help="after editing, save as new file, converts if file extension is different")
    parser.add_argument('--verbose', '-v', action='count', default=0)
    args = parser.parse_args()

    if args.verbose:
        print("importsvg: Loading %s" % args.font_filename)
    font = fontforge.open(args.font_filename)
    write_font_filename = args.save_as if args.save_as is not None else args.font_filename

    idx = 0
    for svg_filename in args.svg_filenames:
        idx += 1
        (codepoint, glyphname, real_codepoint, plain_glyphname, suffix) = parse_glyph_svg_filename(svg_filename)
        if codepoint is None and glyphname is None:
            if args.verbose:
                print("importsvg %s: %s: not an SVG character filename; skipping" % (args.font_filename, svg_filename))
            continue
        if glyphname in font:
            glyph = font[glyphname]
            if len(glyph.references):
                print("WARNING: glyph %s U+%04X contains references but %s is present" % (glyphname, glyph.unicode, svg_filename))
                continue
        if args.verbose:
            print("U+%04x %s (%d/%d)" % (glyph.unicode, glyphname, idx, len(args.svg_filenames)))
        glyph = font.createChar(codepoint, glyphname)
        glyph.foreground = fontforge.layer()
        orig_width = glyph.width
        font.strokedfont = True
        if args.verbose:
            print("importsvg %s: glyph width of %s is originally %d" % (args.font_filename, glyph.glyphname, glyph.width))
        if args.verbose:
            print("importsvg %s: Importing %s into %s" % (args.font_filename, svg_filename, glyph.glyphname))
        glyph.importOutlines(svg_filename)
        if args.verbose:
            print("importsvg %s: glyph width of %s is now %d" % (args.font_filename, glyph.glyphname, glyph.width))
        font.strokedfont = False
        glyph.width = orig_width

    for codepoint in range(33, 127):
        plain_glyphname = fontforge.nameFromUnicode(codepoint)
        simpl_glyphname = fontforge.nameFromUnicode(codepoint) + ".simpl"
        glyphname = None
        if simpl_glyphname in font:
            glyphname = simpl_glyphname
        elif plain_glyphname in font:
            glyphname = plain_glyphname
        else:
            continue
        glyph = font[glyphname]

        sm_glyphname = plain_glyphname + '.smol'
        sm_glyph = font.createChar(-1, sm_glyphname)
        sm_glyph.foreground = fontforge.layer() # clear out any existing contours

        pen = sm_glyph.glyphPen() # pen to draw into smol glyph
        glyph.draw(pen)
        pen = None

        sm_glyph.transform(psMat.scale(0.5))
        sm_glyph.transform(psMat.translate(orig_width / 4, STROKE_WIDTH_BASIS / 4))
        sm_glyph.width = glyph.width

    if os.path.splitext(write_font_filename)[1] == '.sfd':
        if args.verbose:
            print("importsvg: Saving %s" % write_font_filename)
        font.save(write_font_filename)
    else:
        if args.verbose:
            print("importsvg: Generating %s" % write_font_filename)
        font.generate(write_font_filename)
    font.close()

main()
